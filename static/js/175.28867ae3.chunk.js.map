{"version":3,"file":"static/js/175.28867ae3.chunk.js","mappings":"qQAiBA,EAbkB,WAChB,OACE,iBAAKA,UAAU,cAAf,WACE,gBAAKC,IAAKC,EAAUC,IAAI,cACxB,iBAAKH,UAAU,mBAAf,oCACwB,kBADxB,kBAIA,gBAAKC,IAAKG,EAAcD,IAAI,uB,sHCJlC,EANiB,WACf,OACE,gBAAKE,MAAO,CAACC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAASC,UAAW,UAAWC,OAAQ,UAAWT,IAAKU,EAAKR,IAAI,gB,8GC2C3H,UAtCmB,SAAC,GAA2B,IAA1BS,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,SACvBC,GAAMC,EAAAA,EAAAA,MAAND,GACP,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA6DC,EAAAA,EAAAA,KAAtDC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,SAAUC,EAAjC,EAAiCA,aAAcC,EAA/C,EAA+CA,YAE/CC,EAAAA,EAAAA,YAAU,WACRC,MACC,CAACZ,IAEJ,IAAMY,EAAa,WAEjB,OADAF,IACQX,GACN,IAAK,QACHS,EAASR,GAAIa,KAAKC,GAClB,MACF,IAAK,YACHL,EAAaT,GAAIa,KAAKC,KAItBA,EAAe,SAACX,GACpBC,EAAQD,IAGJY,EAAWR,GAAQ,SAAC,IAAD,IAAc,KACjCS,EAAUV,GAAU,SAAC,IAAD,IAAa,KACjCW,EAAYX,GAAWC,IAAUJ,EAAmC,MAA3B,SAACL,EAAD,CAAWK,KAAMA,IAEhE,OACE,iCACE,SAAC,IAAD,IACCY,EACAC,EACAC,O,yGCmBP,EA3DyB,WACvB,MCDqB,WACrB,OAA8Bf,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBY,EAAhB,KACA,GAA0BhB,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcY,EAAd,KAEMC,GAAUC,EAAAA,EAAAA,aAAW,mCAAC,WAAOC,GAAP,kGAAYC,EAAZ,+BAAqB,MAAOC,EAA5B,+BAAmC,KAAMC,EAAzC,+BAAmD,CAAC,eAAiB,oBAC/FP,GAAW,GADe,kBAGDQ,MAAMJ,EAAK,CAACC,OAAAA,EAAQC,KAAAA,EAAMC,QAAAA,IAHzB,WAGlBE,EAHkB,QAKXC,GALW,uBAMhB,IAAIC,MAAJ,0BAA6BP,EAA7B,qBAA6CK,EAASG,SANtC,yBASLH,EAASI,OATJ,eASlB5B,EATkB,OAWxBe,GAAW,GAXa,kBAYjBf,GAZiB,wCAcxBe,GAAW,GACXC,EAAS,KAAEa,SAfa,+DAAD,sDAkBxB,IAGH,MAAO,CAAC1B,QAAAA,EAASC,MAAAA,EAAOa,QAAAA,EAASV,YADdW,EAAAA,EAAAA,cAAY,kBAAMF,EAAS,QAAO,KDvBPc,GAAvC3B,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOa,EAAvB,EAAuBA,QAASV,EAAhC,EAAgCA,WAE1BwB,EAAW,4CACXC,EAAU,0CAGVC,EAAgB,mCAAG,yGAAOC,EAAP,+BAFL,IAEK,SACLjB,EAAQ,GAAD,OAAIc,EAAJ,sCAA0CG,EAA1C,YAAoDF,IADtD,cACjBG,EADiB,yBAEhBA,EAAInC,KAAKoC,QAAQC,IAAIC,IAFL,2CAAH,qDAKhBC,EAAkB,mCAAG,WAAOC,GAAP,uFACPvB,EAAQ,GAAD,OAAIc,EAAJ,2BAA+BS,EAA/B,YAAuCR,IADvC,cACnBG,EADmB,yBAElBA,EAAInC,KAAKoC,QAAQC,IAAIC,IAFH,2CAAH,sDAKlBhC,EAAY,mCAAG,WAAOT,GAAP,uFACDoB,EAAQ,GAAD,OAAIc,EAAJ,sBAA0BlC,EAA1B,YAAgCmC,IADtC,cACbG,EADa,yBAEZG,EAAoBH,EAAInC,KAAKoC,QAAQ,KAFzB,2CAAH,sDAKZK,EAAY,mCAAG,yGAAOP,EAAP,+BAAgB,EAAhB,SACDjB,EAAQ,GAAD,OAAIc,EAAJ,kCAAsCG,EAAtC,YAAgDF,IADtD,cACbG,EADa,yBAEZA,EAAInC,KAAKoC,QAAQC,IAAIK,IAFT,2CAAH,qDAKZrC,EAAQ,mCAAG,WAAOR,GAAP,uFACGoB,EAAQ,GAAD,OAAIc,EAAJ,mBAAuBlC,EAAvB,YAA6BmC,IADvC,cACTG,EADS,yBAERO,EAAiBP,EAAInC,KAAKoC,QAAQ,KAF1B,2CAAH,sDAKRE,EAAsB,SAACK,GAC3B,MAAO,CACL9C,GAAI8C,EAAK9C,GACT2C,KAAOG,EAAKH,KACZI,YAAaD,EAAKC,YAAL,UAAsBD,EAAKC,YAAYC,MAAM,EAAG,KAAhD,OAA4D,6CACzEC,UAAWH,EAAKG,UAAUC,KAAO,IAAMJ,EAAKG,UAAUE,UACtDC,SAAUN,EAAKO,KAAK,GAAG/B,IACvBgC,KAAMR,EAAKO,KAAK,GAAG/B,IACnBiC,OAAQT,EAAKS,OAAOC,QAIlBX,EAAmB,SAACU,GACxB,MAAO,CACLvD,GAAIuD,EAAOvD,GACXyD,MAAQF,EAAOE,MACfV,YAAaQ,EAAOR,aAAe,0CACnCW,UAAWH,EAAOG,UAAP,UAAsBH,EAAOG,UAA7B,UAAiD,2CAC5DT,UAAWM,EAAON,UAAUC,KAAO,IAAMK,EAAON,UAAUE,UAC1DQ,SAAUJ,EAAOK,YAAYD,UAAY,QACzCE,MAAON,EAAOO,OAAO,GAAGD,MAAjB,UAA4BN,EAAOO,OAAO,GAAGD,MAA7C,KAAwD,kBAInE,MAAO,CAACvD,QAAAA,EAASC,MAAAA,EAAOG,WAAAA,EAAY0B,iBAAAA,EAAkB3B,aAAAA,EAAciC,mBAAAA,EAAoBE,aAAAA,EAAcpC,SAAAA","sources":["components/appBanner/AppBanner.js","components/errorMsg/ErrorMsg.js","components/pages/SinglePage.js","services/MarvelServece.js","hooks/http.hook.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n  return (\n    <div className=\"app__banner\">\n      <img src={avengers} alt=\"Avengers\"/>\n      <div className=\"app__banner-text\">\n        New comics every week!<br/>\n        Stay tuned!\n      </div>\n      <img src={avengersLogo} alt=\"Avengers logo\"/>\n    </div>\n  )\n}\n\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMsg = () => {\r\n  return (\r\n    <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"error img\"/>\r\n  )\r\n}\r\n\r\nexport default ErrorMsg;","import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelServece';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMsg from '../errorMsg/ErrorMsg';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\n\r\nconst SinglePage = ({Component, dataType}) => {\r\n  const {id} = useParams();\r\n  const [data, setData] = useState(null);\r\n  const {loading, error, getComic, getCharacter, clearError} = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateData()\r\n  }, [id])\r\n\r\n  const updateData = () => {\r\n    clearError();\r\n    switch (dataType) {\r\n      case 'comic':\r\n        getComic(id).then(onDataLoaded);\r\n        break;\r\n      case 'character':\r\n        getCharacter(id).then(onDataLoaded);\r\n    }\r\n  }\r\n\r\n  const onDataLoaded = (data) => {\r\n    setData(data);\r\n  }\r\n\r\n  const errorMsg = error ? <ErrorMsg/> : null;\r\n  const spinner = loading ? <Spinner/> : null;\r\n  const content = !(loading || error || !data) ? <Component data={data}/> : null;\r\n\r\n  return (\r\n    <>\r\n      <AppBanner/>\r\n      {errorMsg}\r\n      {spinner}\r\n      {content}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SinglePage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n  const {loading, error, request, clearError} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=3f1bbb88ac40ae60022fb40c97324675';\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}/characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(`${_apiBase}/comics?limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  }\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}/comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  }\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name : char.name,\r\n      description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items\r\n    }\r\n  }\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title : comics.title,\r\n      description: comics.description || 'There is no description for this comics',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} pages` : 'No information about the number of pages',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n    }\r\n  }\r\n\r\n  return {loading, error, clearError, getAllCharacters, getCharacter, getCharacterByName, getAllComics, getComic};\r\n}\r\n\r\nexport default useMarvelService;","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type' : 'application/json'}) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(url, {method, body, headers});\r\n\r\n      if(!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      setLoading(false);\r\n      return data;\r\n    } catch(e) {\r\n      setLoading(false);\r\n      setError(e.message);\r\n      throw e;\r\n    }\r\n  }, [])\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n  return {loading, error, request, clearError}\r\n}"],"names":["className","src","avengers","alt","avengersLogo","style","display","width","height","objectFit","margin","img","Component","dataType","id","useParams","useState","data","setData","useMarvelService","loading","error","getComic","getCharacter","clearError","useEffect","updateData","then","onDataLoaded","errorMsg","spinner","content","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","message","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacterByName","name","getAllComics","_transformComics","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}