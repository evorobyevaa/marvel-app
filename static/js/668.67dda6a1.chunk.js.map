{"version":3,"file":"static/js/668.67dda6a1.chunk.js","mappings":"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","sources":["components/errorMsg/ErrorMsg.js","components/pages/SingleComicPage.js","services/MarvelServece.js","hooks/http.hook.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMsg = () => {\r\n  return (\r\n    <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"error img\"/>\r\n  )\r\n}\r\n\r\nexport default ErrorMsg;","import { useParams, Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMsg from '../errorMsg/ErrorMsg';\r\nimport useMarvelService from '../../services/MarvelServece';\r\n\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComicPage = () => {\r\n  const {comicId} = useParams();\r\n  const [comic, setComic] = useState(null);\r\n  const {loading, error, getComic, clearError} = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateComic();\r\n  }, [comicId])\r\n  \r\n  const updateComic = () => {\r\n    clearError();\r\n    if (!comicId) {\r\n      return;\r\n    }\r\n    getComic(comicId)\r\n      .then(onComicLoaded)\r\n  }\r\n\r\n  const onComicLoaded = (comic) => {\r\n    setComic(comic);\r\n  }\r\n\r\n  const errorMsg = error ? <ErrorMsg/> : null;\r\n  const spinner = loading ? <Spinner/> : null;\r\n  const content = !(loading || error || !comic) ? <View comic={comic}/> : null;\r\n\r\n  return (\r\n    <>\r\n      {errorMsg}\r\n      {spinner}\r\n      {content}\r\n    </>\r\n  )\r\n}\r\n\r\nconst View = ({comic}) => {\r\n  const {thumbnail, title, description, pageCount, language, price} = comic;\r\n\r\n  return (\r\n    <div className=\"single-comic\">\r\n      <img src={thumbnail} alt=\"{title}\" className=\"single-comic__img\"/>\r\n      <div className=\"single-comic__info\">\r\n        <h2 className=\"single-comic__name\">{title}</h2>\r\n        <p className=\"single-comic__descr\">{description}</p>\r\n        <p className=\"single-comic__descr\">{pageCount}</p>\r\n        <p className=\"single-comic__descr\">Language: {language}</p>\r\n        <div className=\"single-comic__price\">{price}</div>\r\n      </div>\r\n      <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SingleComicPage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n  const {loading, error, request, clearError} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=3f1bbb88ac40ae60022fb40c97324675';\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}/characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(`${_apiBase}/comics?limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  }\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}/comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  }\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name : char.name,\r\n      description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items\r\n    }\r\n  }\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title : comics.title,\r\n      description: comics.description || 'There is no description for this comics',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} pages` : 'No information about the number of pages',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n    }\r\n  }\r\n\r\n  return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic};\r\n}\r\n\r\nexport default useMarvelService;","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type' : 'application/json'}) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(url, {method, body, headers});\r\n\r\n      if(!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      setLoading(false);\r\n      return data;\r\n    } catch(e) {\r\n      setLoading(false);\r\n      setError(e.message);\r\n      throw e;\r\n    }\r\n  }, [])\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n  return {loading, error, request, clearError}\r\n}"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","comic","thumbnail","title","description","pageCount","language","price","className","to","comicId","useParams","useState","setComic","useMarvelService","loading","error","getComic","clearError","useEffect","updateComic","then","onComicLoaded","errorMsg","ErrorMsg","spinner","Spinner","content","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","char","name","slice","path","extension","homepage","urls","wiki","comics","items","textObjects","prices"],"sourceRoot":""}