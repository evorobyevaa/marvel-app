{"version":3,"file":"static/js/875.503c7c6a.chunk.js","mappings":"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","sources":["components/errorMsg/ErrorMsg.js","components/randomChar/RandomChar.js","components/charCatalog/CharCatalog.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelServece.js","hooks/http.hook.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMsg = () => {\r\n  return (\r\n    <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"error img\"/>\r\n  )\r\n}\r\n\r\nexport default ErrorMsg;","import { useState, useEffect } from 'react';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMsg from '../errorMsg/ErrorMsg';\r\nimport useMarvelService from '../../services/MarvelServece';\r\nimport './randomChar.scss';\r\nimport decoration from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n  const [char, setChar] = useState({});\r\n  \r\n  const {loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n    const timerId = setInterval(updateChar, 60000);\r\n    return () => {\r\n      clearInterval(timerId)\r\n    }\r\n  }, []);\r\n  \r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  }\r\n\r\n  const updateChar = () => {\r\n    clearError();\r\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n    getCharacter(id)\r\n      .then(onCharLoaded);\r\n  }\r\n\r\n  const errorMsg = error ? <ErrorMsg/> : null;\r\n  const spinner = loading ? <Spinner/> : null;\r\n  const content = !(loading || error) ? <View char={char}/> : null;\r\n  \r\n  return (\r\n    <div className=\"randomchar\">\r\n      {errorMsg}\r\n      {spinner}\r\n      {content}\r\n      <div className=\"randomchar__static\">\r\n        <p className=\"randomchar__title\">\r\n        Random character for today! <br/>\r\n        Do you want to get to know him better?\r\n        </p>\r\n        <p className=\"randomchar__title\">\r\n        Or choose another one\r\n        </p>\r\n        <button className=\"btn btn__main\" onClick={updateChar}>\r\n          <div className=\"inner\">TRY IT</div>\r\n        </button>\r\n        <img className=\"randomchar__decoration\" src={decoration} alt=\"Random Decoration\" />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst View = ({char}) => {\r\n  const {name, description, thumbnail, homepage, wiki} = char;\r\n  return (\r\n    <div className=\"randomchar__block\">\r\n      <img className=\"randomchar__img\" src={thumbnail} alt=\"Random Character\" />\r\n      <div className=\"randomchar__info\">\r\n        <p className=\"randomchar__name\">{name}</p>\r\n        <p className=\"randomchar__descr\">{description}</p>\r\n        <div className=\"randomchar__btns\">\r\n          <a className=\"btn btn__main\" href={homepage}>\r\n            <div className=\"inner\">HOMEPAGE</div> \r\n          </a>\r\n          <a className=\"btn btn__second\" href={wiki}>\r\n            <div className=\"inner\">WIKI</div>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMsg from '../errorMsg/ErrorMsg';\r\nimport useMarvelService from '../../services/MarvelServece';\r\nimport './charCatalog.scss';\r\n\r\nconst CharCatalog = (props) => {\r\n\r\n  const [charCatalog, setCharCatalog] = useState([]);\r\n  const [newItemLoading, setNewItemLoading] = useState(false);\r\n  const [offset, setOffset] = useState(210);\r\n  const [charEnded, setCharEnded] = useState(false);\r\n\r\n  const {loading, error, getAllCharacters} = useMarvelService();\r\n  \r\n  useEffect(() => {\r\n    onRequest(offset, true);\r\n  }, []);\r\n\r\n  const onRequest = (offset, initial) => {\r\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n    getAllCharacters(offset)\r\n    .then(onCharCatalogLoaded)\r\n  }\r\n\r\n  const onCharCatalogLoaded = (newCharCatalog) => {\r\n    let ended = false;\r\n    if (newCharCatalog.length < 9) {\r\n      ended = true;\r\n    }\r\n   \r\n    setCharCatalog(charCatalog => [...charCatalog, ...newCharCatalog]);\r\n    setNewItemLoading(newItemLoading => false);\r\n    setOffset(offset => offset + 9);\r\n    setCharEnded(charEnded => ended);\r\n  }\r\n\r\n  const itemRefs = useRef([]);\r\n\r\n  const focusOnItem = (id) => {\r\n    itemRefs.current.forEach(item => item.classList.remove('char__item-selected'));\r\n    itemRefs.current[id].classList.add('char__item-selected');\r\n    itemRefs.current[id].focus();\r\n  }\r\n\r\n  function renderItems(arr) {\r\n    const items = arr.map((item, i) => {\r\n      return (\r\n        <li \r\n          className=\"char__item\" \r\n          tabIndex={0}\r\n          key={item.id} \r\n          ref={el => itemRefs.current[i] = el}\r\n          onClick={() => {\r\n              props.onCharSelected(item.id);\r\n              focusOnItem(i);\r\n            }\r\n          }\r\n          onKeyPress={(e) => {\r\n            if (e.key === ' ' || e.key === \"Enter\") {\r\n                props.onCharSelected(item.id);\r\n                focusOnItem(i);\r\n              }\r\n            }\r\n          }>\r\n          <img className=\"char__img\" src={item.thumbnail} alt={item.name} />\r\n          <div className=\"char__name\">{item.name}</div>\r\n        </li>\r\n      )\r\n    });\r\n\r\n    \r\n    return (\r\n      <ul className=\"char__list\"> \r\n        {items}\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  const items = renderItems(charCatalog);\r\n  const errorMsg = error ? <ErrorMsg/> : null;\r\n  const spinner = loading && !newItemLoading ? <Spinner/> : null;\r\n  return (\r\n    <div className=\"char__catalog\">\r\n      {errorMsg}\r\n      {spinner}\r\n      {items}\r\n      <button \r\n        className=\"btn btn__long\"\r\n        disabled={newItemLoading}\r\n        style={{'display': charEnded ? 'none' : 'block'}}\r\n        onClick={() => onRequest(offset)}>\r\n        <div className=\"inner\">LOAD MORE</div> \r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nCharCatalog.propTypes = {\r\n  onCharSelected: PropTypes.func.isRequired\r\n}\r\n \r\nexport default CharCatalog;","import './skeleton.scss';\n\nconst Skeleton = () => {\n  return (\n    <>\n      <p className=\"char__select\">Please select a character to see information</p>\n      <div className=\"skeleton\">\n        <div className=\"pulse skeleton__header\">\n          <div className=\"pulse skeleton__circle\"></div>\n          <div className=\"pulse skeleton__mini\"></div>\n        </div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n      </div>\n    </>\n  )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMsg from '../errorMsg/ErrorMsg';\r\nimport useMarvelService from '../../services/MarvelServece';\r\nimport Skeleton from '../skeleton/Skeleton';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n  const [char, setChar] = useState(null);\r\n\r\n  const {loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n  }, [props.charId])\r\n  \r\n  const updateChar = () => {\r\n    clearError();\r\n    const {charId} = props;\r\n    if (!charId) {\r\n      return;\r\n    }\r\n    getCharacter(charId)\r\n      .then(onCharLoaded)\r\n  }\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  }\r\n\r\n  const skeleton = char || loading || error ? null : <Skeleton/>;\r\n  const errorMsg = error ? <ErrorMsg/> : null;\r\n  const spinner = loading ? <Spinner/> : null;\r\n  const content = !(loading || error || !char) ? <View char={char}/> : null;\r\n  return (\r\n    <div className=\"char__info\">\r\n      {skeleton}\r\n      {errorMsg}\r\n      {spinner}\r\n      {content}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst View = ({char}) => {\r\n  const {name, description, thumbnail, homepage, wiki, comics} = char;\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"char__basic\">\r\n          <img className=\"char__info-img\" src={thumbnail} alt={name} />\r\n          <div className=\"char__wrapper\">\r\n            <p className=\"char__info-name\">{name}</p>\r\n            <div className=\"char__info-btns\">\r\n              <a className=\"btn btn__main\" href={homepage}>\r\n                <div className=\"inner\">HOMEPAGE</div> \r\n              </a>\r\n              <a className=\"btn btn__second\" href={wiki}>\r\n                <div className=\"inner\">WIKI</div>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"char__descr\">\r\n          {description}\r\n        </div>\r\n        <div className=\"char__comics\">\r\n          Comics:\r\n        </div>\r\n        <ul className=\"char__comics-list\">\r\n          {comics.length > 0 ? null : 'There is no comics for this character'}\r\n          {\r\n            comics.map((item, i) => {\r\n              // eslint-disable-next-line\r\n              if (i > 9) return;\r\n              return (\r\n                <li className=\"char__comics-item\" key={i}>{item.name}</li>\r\n              )\r\n            })\r\n          }\r\n        </ul>\r\n    </>\r\n  )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n  charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelServece';\r\nimport ErrorMsg from '../errorMsg/ErrorMsg';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n  const onCharLoaded = (char) => {\r\n      setChar(char);\r\n  }\r\n  const updateChar = (name) => {\r\n      clearError();\r\n      getCharacterByName(name)\r\n          .then(onCharLoaded);\r\n  }\r\n  const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMsg /></div> : null;\r\n  const results = !char ? null : char.length > 0 ?\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n      <Link to={`/marvel-app/characters/${char[0].id}`} className=\"btn btn__second\">\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div> : \r\n    <div className=\"char__search-error\">\r\n      The character was not found. Check the name and try again\r\n    </div>;\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues = {{\r\n          charName: ''\r\n        }}\r\n        validationSchema = {Yup.object({\r\n          charName: Yup.string().required('This field is required')\r\n        })}\r\n        onSubmit = { ({charName}) => {\r\n          updateChar(charName);\r\n        }}>\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field \r\n              id=\"charName\" \r\n              name='charName' \r\n              type='text' \r\n              placeholder=\"Enter name\"/>\r\n            <button \r\n              type='submit' \r\n              className=\"btn btn__main\"\r\n              disabled={loading}>\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n        </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMsg from \"../errorMsg/ErrorMsg\";\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    this.setState({\r\n      error: true\r\n    })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <h2><ErrorMsg/></h2>\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharCatalog from '../charCatalog/CharCatalog';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm'\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Marvel information portal\"/>\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar/>\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharCatalog onCharSelected={onCharSelected}/>\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar}/>\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm/>\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"main__decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MainPage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n  const {loading, error, request, clearError} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=3f1bbb88ac40ae60022fb40c97324675';\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}/characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(`${_apiBase}/comics?limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  }\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}/comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  }\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name : char.name,\r\n      description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items\r\n    }\r\n  }\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title : comics.title,\r\n      description: comics.description || 'There is no description for this comics',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} pages` : 'No information about the number of pages',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n    }\r\n  }\r\n\r\n  return {loading, error, clearError, getAllCharacters, getCharacter, getCharacterByName, getAllComics, getComic};\r\n}\r\n\r\nexport default useMarvelService;","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type' : 'application/json'}) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(url, {method, body, headers});\r\n\r\n      if(!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      setLoading(false);\r\n      return data;\r\n    } catch(e) {\r\n      setLoading(false);\r\n      setError(e.message);\r\n      throw e;\r\n    }\r\n  }, [])\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n  return {loading, error, request, clearError}\r\n}"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","char","name","description","thumbnail","homepage","wiki","className","href","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMsg","ErrorMsg","spinner","Spinner","content","onClick","decoration","props","charCatalog","setCharCatalog","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharCatalogLoaded","newCharCatalog","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","comics","charId","skeleton","getCharacterByName","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","ErrorBoundary","state","errorInfo","this","setState","children","Component","selectedChar","Helmet","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}